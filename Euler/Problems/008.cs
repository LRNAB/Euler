// Copyright 2014 LRNAB <rvaveo+lrnab@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Euler.Problems
{
    /// <summary>
    /// The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
    /// 73167176531330624919225119674426574742355349194934
    /// 96983520312774506326239578318016984801869478851843
    /// 85861560789112949495459501737958331952853208805511
    /// 12540698747158523863050715693290963295227443043557
    /// 66896648950445244523161731856403098711121722383113
    /// 62229893423380308135336276614282806444486645238749
    /// 30358907296290491560440772390713810515859307960866
    /// 70172427121883998797908792274921901699720888093776
    /// 65727333001053367881220235421809751254540594752243
    /// 52584907711670556013604839586446706324415722155397
    /// 53697817977846174064955149290862569321978468622482
    /// 83972241375657056057490261407972968652414535100474
    /// 82166370484403199890008895243450658541227588666881
    /// 16427171479924442928230863465674813919123162824586
    /// 17866458359124566529476545682848912883142607690042
    /// 24219022671055626321111109370544217506941658960408
    /// 07198403850962455444362981230987879927244284909188
    /// 84580156166097919133875499200524063689912560717606
    /// 05886116467109405077541002256983155200055935729725
    /// 71636269561882670428252483600823257530420752963450
    /// Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
    /// </summary>
    class _008
    {
        public static void Solve()
        {
            // 950 Characters
            var longNumber = "73167176531330624919225119674426574742355349194934" +
     "85861560789112949495459501737958331952853208805511" +
     "12540698747158523863050715693290963295227443043557" +
     "66896648950445244523161731856403098711121722383113" +
     "62229893423380308135336276614282806444486645238749" +
     "30358907296290491560440772390713810515859307960866" +
     "70172427121883998797908792274921901699720888093776" +
     "65727333001053367881220235421809751254540594752243" +
     "52584907711670556013604839586446706324415722155397" +
     "53697817977846174064955149290862569321978468622482" +
     "83972241375657056057490261407972968652414535100474" +
     "82166370484403199890008895243450658541227588666881" +
     "16427171479924442928230863465674813919123162824586" +
     "17866458359124566529476545682848912883142607690042" +
     "24219022671055626321111109370544217506941658960408" +
     "07198403850962455444362981230987879927244284909188" +
     "84580156166097919133875499200524063689912560717606" +
     "05886116467109405077541002256983155200055935729725" +
     "71636269561882670428252483600823257530420752963450";

            // Split number into individual numbers
            char[] numbers = longNumber.ToCharArray();
            long greatestProduct = 0;

            // Foundation Number must be Total Char - Adjacent Digits
            for (int i = 0; i < 938; i++)
            {
                // Find product of 13 numbers in Array starting from foundation number till the 13th number from it.
                long product = 1;
                for (int x = 0; x < 13; x++)
                {
                    product *= Convert.ToInt32(numbers[i + x].ToString());
                }

                if (product > greatestProduct)
                    greatestProduct = product;
            }

            Console.WriteLine(String.Concat("Greatest Product is ", greatestProduct));
        }
    }
}